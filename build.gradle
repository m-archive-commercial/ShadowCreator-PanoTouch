plugins {
    id 'com.android.application'
}

apply from: "${rootDir}/common.gradle";

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

//    signingConfigs {
//        debug {
//            storeFile file("A01.keystore")
//            storePassword "Iv12345678"
//            keyAlias "a01key"
//            keyPassword "Iv12345678"
//            v1SigningEnabled true
//            v2SigningEnabled true
//        }
//        release {
//            storeFile file("A01.keystore")
//            storePassword "Iv12345678"
//            keyAlias "a01key"
//            keyPassword "Iv12345678"
//            v1SigningEnabled true
//            v2SigningEnabled true
//        }
//    }

    defaultConfig {
        applicationId "com.luci.pano_touch"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"



        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
//                cppFlags '-std=c++11'
            }
        }

//        全编
//        ndk {
//            abiFilters  "armeabi-v7a"
//        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }
    buildFeatures {
        viewBinding true
    }

    dataBinding{
        enabled true
    }

    viewBinding {
        enabled true
    }
}

dependencies {

//    compileOnly files('/Users/mark/AndroidStudioProjects/ShadowCreator/PanoTouch/libs/classes-0617.jar')

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

/**
 * 要想在IDE中编译奏效，请在项目根目录的"build.gradle"中添加如下：
     gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xbootclasspath/p:LuciTouch/libs/classes-0617.jar")
        }
     }

 */
//
//preBuild {
//    doLast {
//        /**
//         * 以下代码用于将每个模块里的系统默认sdk更改到最后，以启用自定义的sdk，南川，2021年06月10日12:15:07
//         */
////        得到项目的绝对路径，结尾就是项目名，没有slash
//        String projectPath = new File("").absolutePath //        refer: https://discuss.gradle.org/t/how-do-i-reference-my-build-process-current-directory/4483
////        注意：windows由于路径分隔符为"\\"，可能下段不对，这种情况请用split
//        String projectName = projectPath.substring(projectPath.lastIndexOf("/")+1) // refer: https://stackoverflow.com/a/1181976/9422455
//        println(String.format("project path: %s", projectPath))
//
////        由于 prebuild 对每个模块都会执行，所以project.name得到的是模块名而非项目名
//        String moduleName = project.name
//        String moduleImlPath = String.format("%s/.idea/modules/%s/%s.%s.iml", projectPath, moduleName, projectName, moduleName)
//        def imlFile = file(moduleImlPath)
//        println 'Change order of ' + moduleImlPath
//        try {
//            def parsedXml = (new XmlParser()).parse(imlFile)
//            println "handling " + moduleImlPath
//
//            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
//            parsedXml.component[1].remove(jdkNode)
//            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
//            new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
//            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
//        } catch (FileNotFoundException ignored) {
//            // nop, iml not found
//            println "failed to find " + moduleImlPath
//        }
//    }
//}